# 转化为求阶乘中5的个数
# n的阶乘可以表示为 n! = (5*k) * [5*(k-1)] * [5*(k-2)] * ... * (5*1) * A
#                      |________________________________________|
#                                        |
#                                     一共k个
# 其中A为无法被5整除的数的乘积
# 上面式子提取公因式后 n! = 5^k * k! * A
# 用f(n)表示n中5因子的个数
# 即f(n!) = f(5^k * k! * A) = f(5^k) + f(k!) + f(A) = k + f(k!)
# 所以问题的关键是求出n与k之间的关系
# 由于n! = n * (n-2) * (n-3) * ... * 1
# 所以1到n中可以被5整除的数的个数是 n/5, 即 5|2*5|3*5|4*5|5*5|6*5|...| (n//5 * 5) | A
# 正好对应上面的n!的分解式，也就是说 k = n // 5
# 所以上面式子可变换为 f(n!) = n // 5 + f((n//5)!)
# 找到递推公式之后，就可以转换为递归或者循环来解决了，代码如下。
class Solution(object):
    def trailingZeroes(self, n):
        """
        :type n: int
        :rtype: int
        """
        res = 0
        while n // 5 > 0:
            res += (n // 5)
            n = n // 5
        return res